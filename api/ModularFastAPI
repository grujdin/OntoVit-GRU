# ------------------------------------------------------------------------------
# This code is a FastAPI application that dynamically registers APIs and
# then calls them. It also handles different authentication methods, parses
# and transforms request parameters, and stores the responses in a database
# using SQLAlchemy and Pandas.
#
# Workflow:
# 1. Register an API: A client sends a configuration (`APIConfig`) to the
#    `/register_api/` endpoint, defining how the dynamic API should behave
#    (endpoint, parameters, authentication, response format, etc.).
# 2. Call the dynamic API: Once registered, a client can call `/{api_name}/`
#    (using the HTTP method specified in the configuration), and the application
#    will dynamically:
#    - Apply authentication and headers
#    - Pass along query/body/header/path parameters
#    - Call the external API
#    - Parse the response (JSON, CSV, XML, text)
#    - Store the parsed response in the database table
#    - Return the data back to the caller
# @ Ion Grujdin, CEO SpaceTech, Universitatea Nationala de Stiinta si Tehnologie POLITEHNICA Bucuresti, 2024
# ------------------------------------------------------------------------------

from fastapi import FastAPI, HTTPException, Request
from pydantic import BaseModel, Field, field_validator, model_validator
from typing import Optional, Dict, List, Any
import requests
import pandas as pd
from sqlalchemy import create_engine, MetaData, Table, Column, Integer, String, Float, Boolean
from sqlalchemy.exc import SQLAlchemyError
from io import StringIO
import base64

# 1. FastAPI Application and Database Setup
# - Creates the FastAPI app.
# - Sets up the database connection using SQLAlchemy.
# - Prepares a metadata object to manage and create tables.
app = FastAPI()

DATABASE_URL = "sqlite:///./dynamic_apis.db"
engine = create_engine(DATABASE_URL)
metadata = MetaData()

# 2. In-Memory Registry
# - Holds registered APIs in a dictionary keyed by API name.
# - In production, this is replaced by persistent storage.
registered_apis = {}


# 3. Pydantic Models
#    a. ParameterConfig
#    b. AuthenticationConfig
#    c. APIConfig

# Parameter Configuration Model
# Describes a single parameter for an API endpoint:
#  - name: the parameter name.
#  - in_ (alias 'in'): where the parameter is located (path, query, header, body).
#  - data_type: expected type (string, integer, float, boolean, enum).
#  - required: whether the parameter is mandatory.
#  - default: default value if not provided.
#  - enum_values: optional list of valid values if data_type is enum.
class ParameterConfig(BaseModel):
    name: str
    in_: str = Field(..., alias='in')
    data_type: str
    required: bool = False
    default: Optional[Any] = None
    enum_values: Optional[List[Any]] = None

    @field_validator('in_')
    @classmethod
    def validate_in(cls, value):
        if value not in {'path', 'query', 'header', 'body'}:
            raise ValueError("Parameter 'in' must be one of 'path', 'query', 'header', 'body'")
        return value

    @field_validator('data_type')
    @classmethod
    def validate_data_type(cls, value):
        if value not in {'string', 'integer', 'float', 'boolean', 'enum'}:
            raise ValueError("data_type must be one of 'string', 'integer', 'float', 'boolean', 'enum'")
        return value


# Authentication Configuration Model
# Describes authentication settings for the dynamic API:
#  - auth_type: type of authentication (none, api_key, oauth2, bearer_token, basic, custom).
#  - Depending on auth_type, certain fields must be set (e.g., token for bearer_token).
class AuthenticationConfig(BaseModel):
    auth_type: str  # 'none', 'api_key', 'oauth2', 'bearer_token', 'basic', 'custom'

    # For 'api_key'
    api_key_name: Optional[str] = None
    api_key_value: Optional[str] = None
    api_key_in: Optional[str] = None  # 'header', 'query'

    # For 'bearer_token', 'oauth2'
    token: Optional[str] = None

    # For 'basic'
    username: Optional[str] = None
    password: Optional[str] = None

    # For 'custom'
    custom_headers: Optional[Dict[str, str]] = None

    @field_validator('auth_type')
    @classmethod
    def validate_auth_type(cls, value):
        if value not in {'none', 'api_key', 'oauth2', 'bearer_token', 'basic', 'custom'}:
            raise ValueError("auth_type must be one of 'none', 'api_key', 'oauth2', 'bearer_token', 'basic', 'custom'")
        return value

    @model_validator(mode='after')
    @classmethod
    def check_required_fields(cls, values):
        auth_type = values.auth_type
        required_fields = []
        if auth_type == 'api_key':
            required_fields = ['api_key_name', 'api_key_value', 'api_key_in']
        elif auth_type in {'bearer_token', 'oauth2'}:
            required_fields = ['token']
        elif auth_type == 'basic':
            required_fields = ['username', 'password']
        elif auth_type == 'custom':
            required_fields = ['custom_headers']

        for field_name in required_fields:
            if getattr(values, field_name) is None:
                raise ValueError(f"{field_name} is required for auth_type '{auth_type}'")
        return values


# API Configuration Model
# Describes the entire configuration for a dynamic API:
#  - name: identifier for the API (also used as /{api_name} path).
#  - endpoint: external URL to call.
#  - method: HTTP method (GET, POST, etc.).
#  - params: list of ParameterConfig describing the input parameters.
#  - headers: static headers.
#  - authentication: optional AuthenticationConfig.
#  - response_format: e.g., json, csv, xml, text.
#  - data_map: how to rename fields from the response.
#  - storage_table: DB table name to store data.
#  - storage_columns: dict mapping field -> SQLAlchemy column type.
class APIConfig(BaseModel):
    name: str
    endpoint: str
    method: str  # 'GET', 'POST', etc.
    params: List[ParameterConfig] = []
    headers: Dict[str, str] = {}
    authentication: Optional[AuthenticationConfig] = None
    response_format: str
    data_map: Dict[str, str]
    storage_table: str
    storage_columns: Dict[str, str]

    @field_validator('method')
    @classmethod
    def validate_method(cls, value):
        if value.upper() not in {'GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS', 'HEAD'}:
            raise ValueError('method must be a valid HTTP method')
        return value.upper()

    @field_validator('response_format')
    @classmethod
    def validate_response_format(cls, value):
        if value not in {'json', 'csv', 'xml', 'text'}:
            raise ValueError('response_format must be one of "json", "csv", "xml", "text"')
        return value

# 4. Authentication Handling
# - Depending on the auth_type in AuthenticationConfig, adds headers/params
#   such as API keys, Bearer tokens, Basic auth, or custom headers.
def handle_authentication(auth_config: Optional[AuthenticationConfig]):
    headers = {}
    params = {}
    if not auth_config or auth_config.auth_type == 'none':
        return headers, params

    auth_type = auth_config.auth_type
    if auth_type == 'api_key':
        api_key_name = auth_config.api_key_name
        api_key_value = auth_config.api_key_value
        api_key_in = auth_config.api_key_in
        if api_key_in == 'header':
            headers[api_key_name] = api_key_value
        elif api_key_in == 'query':
            params[api_key_name] = api_key_value
        else:
            raise HTTPException(status_code=400, detail='api_key_in must be "header" or "query"')
    elif auth_type in {'bearer_token', 'oauth2'}:
        token = auth_config.token
        headers['Authorization'] = f'Bearer {token}'
    elif auth_type == 'basic':
        username = auth_config.username
        password = auth_config.password
        credentials = f"{username}:{password}"
        encoded_credentials = base64.b64encode(credentials.encode('utf-8')).decode('utf-8')
        headers['Authorization'] = f'Basic {encoded_credentials}'
    elif auth_type == 'custom':
        headers.update(auth_config.custom_headers)
    else:
        raise HTTPException(status_code=400, detail=f"Unsupported auth_type: {auth_type}")

    return headers, params


# 5. Parameter Conversion
# - Converts request parameter values to the specified data type.
# - Raises a 400 error if the conversion fails.
def convert_data_type(value, param: ParameterConfig):
    if value is None:
        return value
    data_type = param.data_type
    try:
        if data_type == 'string':
            return str(value)
        elif data_type == 'integer':
            return int(value)
        elif data_type == 'float':
            return float(value)
        elif data_type == 'boolean':
            if isinstance(value, str):
                if value.lower() in {'true', '1', 'yes'}:
                    return True
                elif value.lower() in {'false', '0', 'no'}:
                    return False
                else:
                    raise ValueError(f"Invalid boolean value: {value}")
            else:
                return bool(value)
        elif data_type == 'enum':
            if param.enum_values and value not in param.enum_values:
                raise ValueError(f"Invalid value for enum parameter '{param.name}': {value}")
            return value
        else:
            return value
    except ValueError as e:
        raise HTTPException(status_code=400, detail=str(e))


# 6. XML Parsing (Placeholder)
# - A minimal placeholder for XML parsing.
# - In production, you'd parse and structure the XML into a DataFrame/dict.
def parse_xml(xml_text):
    return pd.DataFrame([{'xml_data': xml_text}])
